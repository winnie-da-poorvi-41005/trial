#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
import math


class SimpleBot(Node):
    def __init__(self):
        super().__init__('simple_bot')

        # Publisher: sends movement commands to robot
        self.cmd_pub = self.create_publisher(Twist, '/cmd_vel', 10)

        # Subscriber: listens to LiDAR data
        self.lidar_sub = self.create_subscription(
            LaserScan, '/scan', self.lidar_callback, 10)

        # Run movement function every 0.1 seconds
        self.timer = self.create_timer(0.1, self.move)

        # Store latest front obstacle distance
        self.front_distance = float('inf')

    def lidar_callback(self, msg):
        """Process LiDAR scan data safely."""
        if not msg.ranges:
            self.get_logger().warn('Received empty LaserScan data!')
            return

        # Filter out invalid values (NaN, inf)
        valid_ranges = [
            r for r in msg.ranges if not math.isinf(r) and not math.isnan(r)
        ]
        if not valid_ranges:
            self.get_logger().warn('All LaserScan readings invalid!')
            return

        # Take the distance straight in front (center index)
        mid_index = len(msg.ranges) // 2
        self.front_distance = msg.ranges[mid_index]

        # Debug info (you can comment this out later)
        self.get_logger().info(f'Front distance: {self.front_distance:.2f} m')

    def move(self):
        """Move forward or turn based on obstacle distance."""
        msg = Twist()

        # If no obstacle ahead, move forward
        if self.front_distance > 0.6:
            msg.linear.x = 0.2
            msg.angular.z = 0.0
        else:
            # Obstacle detected â€” turn right
            msg.linear.x = 0.0
            msg.angular.z = -0.3

        self.cmd_pub.publish(msg)


def main(args=None):
    rclpy.init(args=args)
    node = SimpleBot()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
